// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	errs "github.com/danisbagus/go-common-packages/errs"
	domain "github.com/danisbagus/matchoshop/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// IProductRepository is an autogenerated mock type for the IProductRepository type
type IProductRepository struct {
	mock.Mock
}

// CheckByID provides a mock function with given fields: productID
func (_m *IProductRepository) CheckByID(productID int64) (bool, *errs.AppError) {
	ret := _m.Called(productID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(int64) *errs.AppError); ok {
		r1 = rf(productID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// CheckByIDAndSKU provides a mock function with given fields: productID, sku
func (_m *IProductRepository) CheckByIDAndSKU(productID int64, sku string) (bool, *errs.AppError) {
	ret := _m.Called(productID, sku)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64, string) bool); ok {
		r0 = rf(productID, sku)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(int64, string) *errs.AppError); ok {
		r1 = rf(productID, sku)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// CheckBySKU provides a mock function with given fields: sku
func (_m *IProductRepository) CheckBySKU(sku string) (bool, *errs.AppError) {
	ret := _m.Called(sku)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(sku)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(string) *errs.AppError); ok {
		r1 = rf(sku)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: productID
func (_m *IProductRepository) Delete(productID int64) *errs.AppError {
	ret := _m.Called(productID)

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func(int64) *errs.AppError); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}

// GetAll provides a mock function with given fields: criteria
func (_m *IProductRepository) GetAll(criteria *domain.ProductListCriteria) ([]domain.ProductList, *errs.AppError) {
	ret := _m.Called(criteria)

	var r0 []domain.ProductList
	if rf, ok := ret.Get(0).(func(*domain.ProductListCriteria) []domain.ProductList); ok {
		r0 = rf(criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductList)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(*domain.ProductListCriteria) *errs.AppError); ok {
		r1 = rf(criteria)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// GetAllPaginate provides a mock function with given fields: criteria
func (_m *IProductRepository) GetAllPaginate(criteria *domain.ProductListCriteria) ([]domain.ProductList, int64, *errs.AppError) {
	ret := _m.Called(criteria)

	var r0 []domain.ProductList
	if rf, ok := ret.Get(0).(func(*domain.ProductListCriteria) []domain.ProductList); ok {
		r0 = rf(criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductList)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*domain.ProductListCriteria) int64); ok {
		r1 = rf(criteria)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 *errs.AppError
	if rf, ok := ret.Get(2).(func(*domain.ProductListCriteria) *errs.AppError); ok {
		r2 = rf(criteria)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*errs.AppError)
		}
	}

	return r0, r1, r2
}

// GetOneByID provides a mock function with given fields: productID
func (_m *IProductRepository) GetOneByID(productID int64) (*domain.ProductDetail, *errs.AppError) {
	ret := _m.Called(productID)

	var r0 *domain.ProductDetail
	if rf, ok := ret.Get(0).(func(int64) *domain.ProductDetail); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductDetail)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(int64) *errs.AppError); ok {
		r1 = rf(productID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// Insert provides a mock function with given fields: data
func (_m *IProductRepository) Insert(data *domain.Product) (*domain.Product, *errs.AppError) {
	ret := _m.Called(data)

	var r0 *domain.Product
	if rf, ok := ret.Get(0).(func(*domain.Product) *domain.Product); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(*domain.Product) *errs.AppError); ok {
		r1 = rf(data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: productID, data
func (_m *IProductRepository) Update(productID int64, data *domain.Product) *errs.AppError {
	ret := _m.Called(productID, data)

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func(int64, *domain.Product) *errs.AppError); ok {
		r0 = rf(productID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}

// UpdateStock provides a mock function with given fields: productID, quantity
func (_m *IProductRepository) UpdateStock(productID int64, quantity int64) *errs.AppError {
	ret := _m.Called(productID, quantity)

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func(int64, int64) *errs.AppError); ok {
		r0 = rf(productID, quantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}

type mockConstructorTestingTNewIProductRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIProductRepository creates a new instance of IProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIProductRepository(t mockConstructorTestingTNewIProductRepository) *IProductRepository {
	mock := &IProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
