// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	errs "github.com/danisbagus/go-common-packages/errs"
	domain "github.com/danisbagus/matchoshop/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// IProductCategoryRepository is an autogenerated mock type for the IProductCategoryRepository type
type IProductCategoryRepository struct {
	mock.Mock
}

// CheckByID provides a mock function with given fields: productCategoryID
func (_m *IProductCategoryRepository) CheckByID(productCategoryID int64) (bool, *errs.AppError) {
	ret := _m.Called(productCategoryID)

	var r0 bool
	var r1 *errs.AppError
	if rf, ok := ret.Get(0).(func(int64) (bool, *errs.AppError)); ok {
		return rf(productCategoryID)
	}
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(productCategoryID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64) *errs.AppError); ok {
		r1 = rf(productCategoryID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// CheckByIDAndName provides a mock function with given fields: productCategoryID, name
func (_m *IProductCategoryRepository) CheckByIDAndName(productCategoryID int64, name string) (bool, *errs.AppError) {
	ret := _m.Called(productCategoryID, name)

	var r0 bool
	var r1 *errs.AppError
	if rf, ok := ret.Get(0).(func(int64, string) (bool, *errs.AppError)); ok {
		return rf(productCategoryID, name)
	}
	if rf, ok := ret.Get(0).(func(int64, string) bool); ok {
		r0 = rf(productCategoryID, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64, string) *errs.AppError); ok {
		r1 = rf(productCategoryID, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// CheckByName provides a mock function with given fields: name
func (_m *IProductCategoryRepository) CheckByName(name string) (bool, *errs.AppError) {
	ret := _m.Called(name)

	var r0 bool
	var r1 *errs.AppError
	if rf, ok := ret.Get(0).(func(string) (bool, *errs.AppError)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) *errs.AppError); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: productCategoryID
func (_m *IProductCategoryRepository) Delete(productCategoryID int64) *errs.AppError {
	ret := _m.Called(productCategoryID)

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func(int64) *errs.AppError); ok {
		r0 = rf(productCategoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *IProductCategoryRepository) GetAll() ([]domain.ProductCategoryModel, *errs.AppError) {
	ret := _m.Called()

	var r0 []domain.ProductCategoryModel
	var r1 *errs.AppError
	if rf, ok := ret.Get(0).(func() ([]domain.ProductCategoryModel, *errs.AppError)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.ProductCategoryModel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductCategoryModel)
		}
	}

	if rf, ok := ret.Get(1).(func() *errs.AppError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// GetAllByProductID provides a mock function with given fields: productID
func (_m *IProductCategoryRepository) GetAllByProductID(productID int64) ([]domain.ProductCategoryModel, *errs.AppError) {
	ret := _m.Called(productID)

	var r0 []domain.ProductCategoryModel
	var r1 *errs.AppError
	if rf, ok := ret.Get(0).(func(int64) ([]domain.ProductCategoryModel, *errs.AppError)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(int64) []domain.ProductCategoryModel); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductCategoryModel)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) *errs.AppError); ok {
		r1 = rf(productID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// GetOneByID provides a mock function with given fields: productCategoryID
func (_m *IProductCategoryRepository) GetOneByID(productCategoryID int64) (*domain.ProductCategoryModel, *errs.AppError) {
	ret := _m.Called(productCategoryID)

	var r0 *domain.ProductCategoryModel
	var r1 *errs.AppError
	if rf, ok := ret.Get(0).(func(int64) (*domain.ProductCategoryModel, *errs.AppError)); ok {
		return rf(productCategoryID)
	}
	if rf, ok := ret.Get(0).(func(int64) *domain.ProductCategoryModel); ok {
		r0 = rf(productCategoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductCategoryModel)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) *errs.AppError); ok {
		r1 = rf(productCategoryID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// Insert provides a mock function with given fields: data
func (_m *IProductCategoryRepository) Insert(data *domain.ProductCategoryModel) (*domain.ProductCategoryModel, *errs.AppError) {
	ret := _m.Called(data)

	var r0 *domain.ProductCategoryModel
	var r1 *errs.AppError
	if rf, ok := ret.Get(0).(func(*domain.ProductCategoryModel) (*domain.ProductCategoryModel, *errs.AppError)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(*domain.ProductCategoryModel) *domain.ProductCategoryModel); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductCategoryModel)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.ProductCategoryModel) *errs.AppError); ok {
		r1 = rf(data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: productCategoryID, data
func (_m *IProductCategoryRepository) Update(productCategoryID int64, data *domain.ProductCategoryModel) *errs.AppError {
	ret := _m.Called(productCategoryID, data)

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func(int64, *domain.ProductCategoryModel) *errs.AppError); ok {
		r0 = rf(productCategoryID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}

// NewIProductCategoryRepository creates a new instance of IProductCategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProductCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProductCategoryRepository {
	mock := &IProductCategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
