// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	errs "github.com/danisbagus/go-common-packages/errs"
	mock "github.com/stretchr/testify/mock"
)

// IPaymentResultRepository is an autogenerated mock type for the IPaymentResultRepository type
type IPaymentResultRepository struct {
	mock.Mock
}

// CheckByID provides a mock function with given fields: PaymentResultID
func (_m *IPaymentResultRepository) CheckByID(PaymentResultID string) (bool, *errs.AppError) {
	ret := _m.Called(PaymentResultID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(PaymentResultID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(string) *errs.AppError); ok {
		r1 = rf(PaymentResultID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// CheckByOrderIDAndStatus provides a mock function with given fields: OrderID, status
func (_m *IPaymentResultRepository) CheckByOrderIDAndStatus(OrderID int64, status string) (bool, *errs.AppError) {
	ret := _m.Called(OrderID, status)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64, string) bool); ok {
		r0 = rf(OrderID, status)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(int64, string) *errs.AppError); ok {
		r1 = rf(OrderID, status)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewIPaymentResultRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPaymentResultRepository creates a new instance of IPaymentResultRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPaymentResultRepository(t mockConstructorTestingTNewIPaymentResultRepository) *IPaymentResultRepository {
	mock := &IPaymentResultRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
