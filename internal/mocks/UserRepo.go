// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	errs "github.com/danisbagus/go-common-packages/errs"
	domain "github.com/danisbagus/matchoshop/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// CreateUserCustomer provides a mock function with given fields: data
func (_m *UserRepo) CreateUserCustomer(data *domain.User) (*domain.User, *errs.AppError) {
	ret := _m.Called(data)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(*domain.User) *domain.User); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(*domain.User) *errs.AppError); ok {
		r1 = rf(data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userID
func (_m *UserRepo) Delete(userID int64) *errs.AppError {
	ret := _m.Called(userID)

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func(int64) *errs.AppError); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}

// FindOne provides a mock function with given fields: email
func (_m *UserRepo) FindOne(email string) (*domain.User, *errs.AppError) {
	ret := _m.Called(email)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(string) *errs.AppError); ok {
		r1 = rf(email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// FindOneById provides a mock function with given fields: userID
func (_m *UserRepo) FindOneById(userID int64) (*domain.User, *errs.AppError) {
	ret := _m.Called(userID)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(int64) *domain.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(int64) *errs.AppError); ok {
		r1 = rf(userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *UserRepo) GetAll() ([]domain.UserDetail, *errs.AppError) {
	ret := _m.Called()

	var r0 []domain.UserDetail
	if rf, ok := ret.Get(0).(func() []domain.UserDetail); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserDetail)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func() *errs.AppError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: userID, data
func (_m *UserRepo) Update(userID int64, data *domain.User) *errs.AppError {
	ret := _m.Called(userID, data)

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func(int64, *domain.User) *errs.AppError); ok {
		r0 = rf(userID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}
