// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	errs "github.com/danisbagus/go-common-packages/errs"
	domain "github.com/danisbagus/matchoshop/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepo is an autogenerated mock type for the ProductRepo type
type ProductRepo struct {
	mock.Mock
}

// CheckByID provides a mock function with given fields: productID
func (_m *ProductRepo) CheckByID(productID int64) (bool, *errs.AppError) {
	ret := _m.Called(productID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(int64) *errs.AppError); ok {
		r1 = rf(productID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// CheckByIDAndSKU provides a mock function with given fields: productID, sku
func (_m *ProductRepo) CheckByIDAndSKU(productID int64, sku string) (bool, *errs.AppError) {
	ret := _m.Called(productID, sku)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64, string) bool); ok {
		r0 = rf(productID, sku)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(int64, string) *errs.AppError); ok {
		r1 = rf(productID, sku)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// CheckBySKU provides a mock function with given fields: sku
func (_m *ProductRepo) CheckBySKU(sku string) (bool, *errs.AppError) {
	ret := _m.Called(sku)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(sku)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(string) *errs.AppError); ok {
		r1 = rf(sku)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: productID
func (_m *ProductRepo) Delete(productID int64) *errs.AppError {
	ret := _m.Called(productID)

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func(int64) *errs.AppError); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *ProductRepo) GetAll() ([]domain.ProductList, *errs.AppError) {
	ret := _m.Called()

	var r0 []domain.ProductList
	if rf, ok := ret.Get(0).(func() []domain.ProductList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductList)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func() *errs.AppError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// GetOneByID provides a mock function with given fields: productID
func (_m *ProductRepo) GetOneByID(productID int64) (*domain.ProductDetail, *errs.AppError) {
	ret := _m.Called(productID)

	var r0 *domain.ProductDetail
	if rf, ok := ret.Get(0).(func(int64) *domain.ProductDetail); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductDetail)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(int64) *errs.AppError); ok {
		r1 = rf(productID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// Insert provides a mock function with given fields: data
func (_m *ProductRepo) Insert(data *domain.Product) (*domain.Product, *errs.AppError) {
	ret := _m.Called(data)

	var r0 *domain.Product
	if rf, ok := ret.Get(0).(func(*domain.Product) *domain.Product); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(*domain.Product) *errs.AppError); ok {
		r1 = rf(data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: productID, data
func (_m *ProductRepo) Update(productID int64, data *domain.Product) *errs.AppError {
	ret := _m.Called(productID, data)

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func(int64, *domain.Product) *errs.AppError); ok {
		r0 = rf(productID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}
