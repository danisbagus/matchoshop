// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	errs "github.com/danisbagus/go-common-packages/errs"
	domain "github.com/danisbagus/matchoshop/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// Create provides a mock function with given fields: form
func (_m *ProductService) Create(form *domain.Product) *errs.AppError {
	ret := _m.Called(form)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func(*domain.Product) *errs.AppError); ok {
		r0 = rf(form)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: productID
func (_m *ProductService) Delete(productID int64) *errs.AppError {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func(int64) *errs.AppError); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}

// GetDetail provides a mock function with given fields: productID
func (_m *ProductService) GetDetail(productID int64) (*domain.ProductDetail, *errs.AppError) {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for GetDetail")
	}

	var r0 *domain.ProductDetail
	var r1 *errs.AppError
	if rf, ok := ret.Get(0).(func(int64) (*domain.ProductDetail, *errs.AppError)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(int64) *domain.ProductDetail); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) *errs.AppError); ok {
		r1 = rf(productID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// GetList provides a mock function with given fields: criteria
func (_m *ProductService) GetList(criteria *domain.ProductListCriteria) ([]domain.ProductDetail, *errs.AppError) {
	ret := _m.Called(criteria)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 []domain.ProductDetail
	var r1 *errs.AppError
	if rf, ok := ret.Get(0).(func(*domain.ProductListCriteria) ([]domain.ProductDetail, *errs.AppError)); ok {
		return rf(criteria)
	}
	if rf, ok := ret.Get(0).(func(*domain.ProductListCriteria) []domain.ProductDetail); ok {
		r0 = rf(criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.ProductListCriteria) *errs.AppError); ok {
		r1 = rf(criteria)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// GetListPaginate provides a mock function with given fields: criteria
func (_m *ProductService) GetListPaginate(criteria *domain.ProductListCriteria) ([]domain.ProductDetail, int64, *errs.AppError) {
	ret := _m.Called(criteria)

	if len(ret) == 0 {
		panic("no return value specified for GetListPaginate")
	}

	var r0 []domain.ProductDetail
	var r1 int64
	var r2 *errs.AppError
	if rf, ok := ret.Get(0).(func(*domain.ProductListCriteria) ([]domain.ProductDetail, int64, *errs.AppError)); ok {
		return rf(criteria)
	}
	if rf, ok := ret.Get(0).(func(*domain.ProductListCriteria) []domain.ProductDetail); ok {
		r0 = rf(criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.ProductListCriteria) int64); ok {
		r1 = rf(criteria)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(*domain.ProductListCriteria) *errs.AppError); ok {
		r2 = rf(criteria)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*errs.AppError)
		}
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: productID, form
func (_m *ProductService) Update(productID int64, form *domain.Product) *errs.AppError {
	ret := _m.Called(productID, form)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func(int64, *domain.Product) *errs.AppError); ok {
		r0 = rf(productID, form)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
